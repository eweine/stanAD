// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_elbo_grad
Eigen::VectorXd get_elbo_grad(const Eigen::VectorXd& par_vals, const Eigen::VectorXd& Zty, const Eigen::VectorXd& Xty, const Eigen::MatrixXd& X, const Eigen::SparseMatrix<double>& Z, const Eigen::SparseMatrix<double>& Z2, const std::vector<int>& blocks_per_ranef, const std::vector<int>& terms_per_block, int& n_ranef_par, int& n_fixef_par);
RcppExport SEXP _stanAD_get_elbo_grad(SEXP par_valsSEXP, SEXP ZtySEXP, SEXP XtySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP Z2SEXP, SEXP blocks_per_ranefSEXP, SEXP terms_per_blockSEXP, SEXP n_ranef_parSEXP, SEXP n_fixef_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type par_vals(par_valsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Zty(ZtySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type blocks_per_ranef(blocks_per_ranefSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type terms_per_block(terms_per_blockSEXP);
    Rcpp::traits::input_parameter< int& >::type n_ranef_par(n_ranef_parSEXP);
    Rcpp::traits::input_parameter< int& >::type n_fixef_par(n_fixef_parSEXP);
    rcpp_result_gen = Rcpp::wrap(get_elbo_grad(par_vals, Zty, Xty, X, Z, Z2, blocks_per_ranef, terms_per_block, n_ranef_par, n_fixef_par));
    return rcpp_result_gen;
END_RCPP
}
// get_elbo_hvp
Eigen::VectorXd get_elbo_hvp(const Eigen::VectorXd& par_vals, const Eigen::Matrix<double, Eigen::Dynamic, 1>& v, const Eigen::VectorXd& Zty, const Eigen::VectorXd& Xty, const Eigen::MatrixXd& X, const Eigen::SparseMatrix<double>& Z, const Eigen::SparseMatrix<double>& Z2, const std::vector<int>& blocks_per_ranef, const std::vector<int>& terms_per_block, int& n_ranef_par, int& n_fixef_par);
RcppExport SEXP _stanAD_get_elbo_hvp(SEXP par_valsSEXP, SEXP vSEXP, SEXP ZtySEXP, SEXP XtySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP Z2SEXP, SEXP blocks_per_ranefSEXP, SEXP terms_per_blockSEXP, SEXP n_ranef_parSEXP, SEXP n_fixef_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type par_vals(par_valsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, Eigen::Dynamic, 1>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Zty(ZtySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type blocks_per_ranef(blocks_per_ranefSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type terms_per_block(terms_per_blockSEXP);
    Rcpp::traits::input_parameter< int& >::type n_ranef_par(n_ranef_parSEXP);
    Rcpp::traits::input_parameter< int& >::type n_fixef_par(n_fixef_parSEXP);
    rcpp_result_gen = Rcpp::wrap(get_elbo_hvp(par_vals, v, Zty, Xty, X, Z, Z2, blocks_per_ranef, terms_per_block, n_ranef_par, n_fixef_par));
    return rcpp_result_gen;
END_RCPP
}
// get_elbo_pois_glmm_MFVB
double get_elbo_pois_glmm_MFVB(const Eigen::VectorXd& par_vals, const Eigen::VectorXd& Zty, const Eigen::VectorXd& Xty, const Eigen::MatrixXd& X, const Eigen::SparseMatrix<double>& Z, const Eigen::SparseMatrix<double>& Z2, const std::vector<int>& blocks_per_ranef, const std::vector<int>& terms_per_block, int& n_ranef_par, int& n_fixef_par);
RcppExport SEXP _stanAD_get_elbo_pois_glmm_MFVB(SEXP par_valsSEXP, SEXP ZtySEXP, SEXP XtySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP Z2SEXP, SEXP blocks_per_ranefSEXP, SEXP terms_per_blockSEXP, SEXP n_ranef_parSEXP, SEXP n_fixef_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type par_vals(par_valsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Zty(ZtySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type blocks_per_ranef(blocks_per_ranefSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type terms_per_block(terms_per_blockSEXP);
    Rcpp::traits::input_parameter< int& >::type n_ranef_par(n_ranef_parSEXP);
    Rcpp::traits::input_parameter< int& >::type n_fixef_par(n_fixef_parSEXP);
    rcpp_result_gen = Rcpp::wrap(get_elbo_pois_glmm_MFVB(par_vals, Zty, Xty, X, Z, Z2, blocks_per_ranef, terms_per_block, n_ranef_par, n_fixef_par));
    return rcpp_result_gen;
END_RCPP
}
// fit_pois_glmm_block_posterior_ccd
Rcpp::List fit_pois_glmm_block_posterior_ccd(Eigen::VectorXd& m, Eigen::VectorXd& S_log_chol, Eigen::VectorXd& b, Eigen::VectorXd& link_offset, const std::vector<int>& n_nz_terms_per_col, const std::vector<int>& terms_per_block, const std::vector<int>& blocks_per_ranef, const std::vector<int>& log_chol_par_per_block, const Eigen::VectorXd& Zty, const Eigen::VectorXd& Xty, const Eigen::MatrixXd& X, const std::vector<int>& Z_i, const std::vector<int>& Z_j, const std::vector<double>& Z_x, Eigen::SparseMatrix<double>& Z, Eigen::SparseMatrix<double>& Z2, double elbo_tol, const int& num_iter, const bool is_mfvb);
RcppExport SEXP _stanAD_fit_pois_glmm_block_posterior_ccd(SEXP mSEXP, SEXP S_log_cholSEXP, SEXP bSEXP, SEXP link_offsetSEXP, SEXP n_nz_terms_per_colSEXP, SEXP terms_per_blockSEXP, SEXP blocks_per_ranefSEXP, SEXP log_chol_par_per_blockSEXP, SEXP ZtySEXP, SEXP XtySEXP, SEXP XSEXP, SEXP Z_iSEXP, SEXP Z_jSEXP, SEXP Z_xSEXP, SEXP ZSEXP, SEXP Z2SEXP, SEXP elbo_tolSEXP, SEXP num_iterSEXP, SEXP is_mfvbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m(mSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type S_log_chol(S_log_cholSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type link_offset(link_offsetSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type n_nz_terms_per_col(n_nz_terms_per_colSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type terms_per_block(terms_per_blockSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type blocks_per_ranef(blocks_per_ranefSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type log_chol_par_per_block(log_chol_par_per_blockSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Zty(ZtySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Z_i(Z_iSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Z_j(Z_jSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Z_x(Z_xSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< double >::type elbo_tol(elbo_tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_mfvb(is_mfvbSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_pois_glmm_block_posterior_ccd(m, S_log_chol, b, link_offset, n_nz_terms_per_col, terms_per_block, blocks_per_ranef, log_chol_par_per_block, Zty, Xty, X, Z_i, Z_j, Z_x, Z, Z2, elbo_tol, num_iter, is_mfvb));
    return rcpp_result_gen;
END_RCPP
}
// H
Eigen::MatrixXd H(Eigen::VectorXd x, Eigen::VectorXd a);
RcppExport SEXP _stanAD_H(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(H(x, a));
    return rcpp_result_gen;
END_RCPP
}
// log_cholesky_grad
Eigen::VectorXd log_cholesky_grad(const Eigen::VectorXd& l_params, const Eigen::MatrixXd& A);
RcppExport SEXP _stanAD_log_cholesky_grad(SEXP l_paramsSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type l_params(l_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(log_cholesky_grad(l_params, A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stanAD_get_elbo_grad", (DL_FUNC) &_stanAD_get_elbo_grad, 10},
    {"_stanAD_get_elbo_hvp", (DL_FUNC) &_stanAD_get_elbo_hvp, 11},
    {"_stanAD_get_elbo_pois_glmm_MFVB", (DL_FUNC) &_stanAD_get_elbo_pois_glmm_MFVB, 10},
    {"_stanAD_fit_pois_glmm_block_posterior_ccd", (DL_FUNC) &_stanAD_fit_pois_glmm_block_posterior_ccd, 19},
    {"_stanAD_H", (DL_FUNC) &_stanAD_H, 2},
    {"_stanAD_log_cholesky_grad", (DL_FUNC) &_stanAD_log_cholesky_grad, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_stanAD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
